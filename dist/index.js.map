{
  "version": 3,
  "sources": ["../src/request.ts", "../src/controller.ts", "../src/index.ts"],
  "sourcesContent": ["import {\r\n  ApiHeaders,\r\n  BeforeSendConfig,\r\n  BeforeSendHandler,\r\n  ApiProxy,\r\n  ApiParams,\r\n  ApiMethod,\r\n} from \"./definitions\";\r\nfunction mapHeaders(\r\n  headers: ApiHeaders | (() => ApiHeaders) = {}\r\n): Headers {\r\n  if (typeof headers === \"function\") {\r\n    return mapHeaders(headers());\r\n  }\r\n\r\n  for (let p in headers) {\r\n    const value = headers[p];\r\n    if (typeof value === \"function\") {\r\n      headers[p] = value();\r\n    }\r\n  }\r\n  return new Headers({\r\n    \"Content-Type\": \"application/json\",\r\n    ...headers,\r\n  });\r\n}\r\nfunction buildParams(\r\n  searchParams: URLSearchParams,\r\n  parentKey = \"\",\r\n  params: ApiParams = {}\r\n) {\r\n  for (let key in params) {\r\n    const value = params[key];\r\n    if (value instanceof Array) {\r\n      for (let v of value) {\r\n        searchParams.append(`${parentKey}${key}`, v);\r\n      }\r\n    } else if (value === null) {\r\n      searchParams.set(`${parentKey}${key}`, \"\");\r\n    } else if (typeof value === \"string\" || typeof value === \"number\") {\r\n      searchParams.set(`${parentKey}${key}`, value as string);\r\n    } else {\r\n      buildParams(searchParams, `${parentKey}${key}.`, value);\r\n    }\r\n  }\r\n}\r\nexport const buildURL = (url: string, params: ApiParams = {}) => {\r\n  const reqURL = new URL(url);\r\n  buildParams(reqURL.searchParams, \"\", params);\r\n  return reqURL.href;\r\n};\r\nfunction buildRequest(\r\n  method: ApiMethod,\r\n  url: string,\r\n  headers?: ApiHeaders,\r\n  params?: ApiParams,\r\n  data?: any\r\n) {\r\n  url = buildURL(url, params);\r\n  const requestHeader = mapHeaders(headers);\r\n\r\n  if (data instanceof FormData) {\r\n    requestHeader.delete(\"Content-Type\");\r\n  } else {\r\n    data = data != null ? JSON.stringify(data) : null;\r\n  }\r\n  return new Request(url, {\r\n    method,\r\n    headers: requestHeader,\r\n    body: data,\r\n  });\r\n}\r\n\r\nasync function processRequest(\r\n  method: ApiMethod,\r\n  url: string,\r\n  params?: ApiParams,\r\n  headers?: ApiHeaders,\r\n  data?: any\r\n) {\r\n  let req = buildRequest(method, url, headers, params, data);\r\n  return fetch(req).then((rsp) => {\r\n    if (!rsp.ok) {\r\n      let errorEvent = new CustomEvent(\"fetcherror\", {\r\n        detail: {\r\n          method: req.method,\r\n          url: req.url,\r\n          body: data,\r\n          status: rsp.status,\r\n          statusText: rsp.statusText,\r\n        },\r\n      });\r\n      window.dispatchEvent(errorEvent);\r\n      throw new Error(`fetch ${req.url} error\uFF0Cstatus=${rsp.status}`);\r\n    }\r\n    try {\r\n      return rsp.json();\r\n    } catch (exc) {\r\n      console.error(`fetch ${req.url} error\uFF0C\u8FD4\u56DE\u503C\u4E0D\u662FJSON`, exc);\r\n    }\r\n  });\r\n}\r\nexport const request = {\r\n  async get(url: string, params?: ApiParams, headers?: ApiHeaders) {\r\n    return processRequest(\"GET\", url, params, headers);\r\n  },\r\n  async post(\r\n    url: string,\r\n    params?: ApiParams,\r\n    headers?: ApiHeaders,\r\n    data?: any\r\n  ) {\r\n    return processRequest(\"POST\", url, params, headers, data);\r\n  },\r\n  async put(\r\n    url: string,\r\n    params?: ApiParams,\r\n    headers?: ApiHeaders,\r\n    data?: any\r\n  ) {\r\n    return processRequest(\"PUT\", url, params, headers, data);\r\n  },\r\n  async patch(\r\n    url: string,\r\n    params?: ApiParams,\r\n    headers?: ApiHeaders,\r\n    data?: any\r\n  ) {\r\n    return processRequest(\"PATCH\", url, params, headers, data);\r\n  },\r\n  async delete(url: string, params?: ApiParams, headers?: ApiHeaders) {\r\n    return processRequest(\"DELETE\", url, params, headers);\r\n  },\r\n};\r\n\r\nexport default request;\r\n", "import {\r\n  ApiHeaders,\r\n  BeforeSendConfig,\r\n  BeforeSendHandler,\r\n  ApiProxy,\r\n  ApiParams,\r\n  ApiController,\r\n} from \"./definitions\";\r\nimport request from \"./request\";\r\nconst ParseActions = [\r\n  \"get\",\r\n  \"post\",\r\n  \"add\",\r\n  \"update\",\r\n  \"put\",\r\n  \"patch\",\r\n  \"modify\",\r\n  \"delete\",\r\n  \"del\",\r\n];\r\nconst ParseActionsRegExp = new RegExp(\r\n  `^(?<action>${ParseActions.join(\"|\")})(?<name>\\\\w+)`,\r\n  \"i\"\r\n);\r\n\r\nexport class Controller implements ApiController {\r\n  [key: string]: any;\r\n  #tableName = \"\";\r\n  #controllerURL = \"\";\r\n  #headers: ApiHeaders = {};\r\n  #beforeSends: Array<BeforeSendHandler> = [];\r\n\r\n  #afterReceives: Array<(result: any) => any> = [];\r\n  #actionsMap: Record<string, boolean | string | string[]> = {\r\n    get: true,\r\n    post: \"add\",\r\n    put: \"update\",\r\n    patch: \"modify\",\r\n    delete: \"del\",\r\n  };\r\n  #parseActionsRegExp = ParseActionsRegExp;\r\n\r\n  constructor(\r\n    name: string,\r\n    baseUrl: string,\r\n    headers: ApiHeaders = {},\r\n    beforeSends: Array<BeforeSendHandler> = [],\r\n    afterReceives: Array<(result: any) => any> = [],\r\n    actionsMap?: Record<string, string | boolean | string[]>,\r\n    parseActions?: Array<string>\r\n  ) {\r\n    baseUrl = baseUrl ?? location.href;\r\n    name = name + \"\";\r\n    this.#headers = headers ?? {};\r\n    this.#controllerURL = new URL(name, baseUrl).href;\r\n    if (name.startsWith(\"/\")) {\r\n      name = name.substring(1);\r\n    }\r\n    this.#tableName = name;\r\n    if (beforeSends) this.#beforeSends = beforeSends;\r\n    if (afterReceives) this.#afterReceives = afterReceives;\r\n\r\n    this.#actionsMap = actionsMap ?? this.#actionsMap;\r\n\r\n    if (parseActions instanceof Array) {\r\n      this.#parseActionsRegExp = new RegExp(\r\n        `^(?<action>${parseActions.join(\"|\")})(?<name>\\\\w+)`,\r\n        \"i\"\r\n      );\r\n    }\r\n\r\n    for (let key in this.#actionsMap) {\r\n      const val = this.#actionsMap[key];\r\n      if (typeof key !== \"string\") {\r\n        continue;\r\n      }\r\n      if (typeof val === \"string\" && this[val] === undefined) {\r\n        this[val] = this[key];\r\n      }\r\n      if (val instanceof Array && val.length) {\r\n        for (let action of val) {\r\n          if (typeof action === \"string\" && this[action] === undefined) {\r\n            this[action] = this[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  get headers() {\r\n    return this.#headers;\r\n  }\r\n  get controllerURL() {\r\n    return this.#controllerURL;\r\n  }\r\n  get beforeSends() {\r\n    return this.#beforeSends;\r\n  }\r\n  get afterReceives() {\r\n    return this.#afterReceives;\r\n  }\r\n  get actionsMap() {\r\n    return this.#actionsMap;\r\n  }\r\n  get parseActionsRegExp() {\r\n    return this.#parseActionsRegExp;\r\n  }\r\n  id(id: string | number) {\r\n    return createController(\r\n      id as string,\r\n      this.controllerURL + \"/\",\r\n      this.headers,\r\n      this.beforeSends,\r\n      this.afterReceives\r\n    );\r\n  }\r\n  path(path: string | number) {\r\n    return createController(\r\n      path as string,\r\n      this.controllerURL + \"/\",\r\n      this.headers,\r\n      this.beforeSends,\r\n      this.afterReceives\r\n    );\r\n  }\r\n  beforeSend(handler: BeforeSendHandler) {\r\n    if (!handler) throw new Error(\"need a handler\");\r\n    this.beforeSends.push(handler);\r\n  }\r\n  afterReceive(handler: (result: any) => any) {\r\n    if (!handler) throw new Error(\"need a handler\");\r\n    this.afterReceives.push(handler);\r\n  }\r\n  /**\r\n   * id\u53EF\u4EE5\u662F\u4E00\u4E2Aid\uFF0C\u6216\u8005\u4E3A\u7A7A\uFF0C\u6216\u8005\u4E00\u4E2A\u67E5\u8BE2\r\n   * @param {*} id\r\n   */\r\n  async get(id?: string | number | ApiParams | Array<string | number>) {\r\n    let url = `${this.controllerURL}`;\r\n    let params: ApiParams | undefined = undefined;\r\n    if (id instanceof Array) {\r\n      url = `${this.controllerURL}/${id.join(\",\")}`;\r\n    } else if (typeof id == \"object\") {\r\n      params = id;\r\n    } else if (arguments.length) {\r\n      url = `${this.controllerURL}/${[...arguments].join(\",\")}`;\r\n    }\r\n    const config: BeforeSendConfig = {\r\n      url,\r\n      method: \"GET\",\r\n      params,\r\n      headers: this.headers,\r\n    };\r\n    this.beforeSends.forEach((handler) => {\r\n      handler(config);\r\n    });\r\n    const result = await request.get(config.url, config.params, config.headers);\r\n    this.afterReceives.forEach((handler) => {\r\n      handler(result);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * \u65B0\u589E\r\n   * @param {*} data\r\n   */\r\n  async post(data?: any, params?: ApiParams) {\r\n    const config: BeforeSendConfig = {\r\n      url: this.controllerURL,\r\n      data,\r\n      headers: this.headers,\r\n      params,\r\n      method: \"POST\",\r\n    };\r\n    this.beforeSends.forEach((handler) => {\r\n      handler(config);\r\n    });\r\n    const result = await request.post(\r\n      config.url,\r\n      config.params,\r\n      config.headers,\r\n      config.data\r\n    );\r\n    this.afterReceives.forEach((handler) => {\r\n      handler(result);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * update\r\n   * @param {*} id\r\n   * @param {*} data\r\n   */\r\n  async put(\r\n    id: string | number | object | undefined,\r\n    data?: any,\r\n    params?: ApiParams\r\n  ) {\r\n    if (data == undefined && typeof id === \"object\") {\r\n      data = id;\r\n      id = undefined;\r\n    }\r\n    const config: BeforeSendConfig = {\r\n      url: id == undefined ? this.controllerURL : `${this.controllerURL}/${id}`,\r\n      data,\r\n      headers: this.headers,\r\n      params,\r\n      method: \"PUT\",\r\n    };\r\n    this.beforeSends.forEach((handler) => {\r\n      handler(config);\r\n    });\r\n    const result = await request.put(\r\n      config.url,\r\n      config.params,\r\n      config.headers,\r\n      config.data\r\n    );\r\n    this.afterReceives.forEach((handler) => {\r\n      handler(result);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * patch\r\n   * @param {*} id\r\n   * @param {*} data\r\n   */\r\n  async patch(\r\n    id: string | number | object | undefined,\r\n    data?: any,\r\n    params?: ApiParams\r\n  ) {\r\n    if (data == undefined && typeof id === \"object\") {\r\n      data = id;\r\n      id = undefined;\r\n    }\r\n    const config: BeforeSendConfig = {\r\n      url: id == undefined ? this.controllerURL : `${this.controllerURL}/${id}`,\r\n      data,\r\n      headers: this.headers,\r\n      params,\r\n      method: \"PATCH\",\r\n    };\r\n    this.beforeSends.forEach((handler) => {\r\n      handler(config);\r\n    });\r\n    const result = await request.patch(\r\n      config.url,\r\n      config.params,\r\n      config.headers,\r\n      config.data\r\n    );\r\n    this.afterReceives.forEach((handler) => {\r\n      handler(result);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * id\u53EF\u4EE5\u662F\u4E00\u4E2Aid\uFF0C\u6216\u8005\u4E00\u4E2A\u6570\u7EC4\uFF0C\u6216\u8005\u4E00\u4E2A\u67E5\u8BE2\r\n   * @param {*} id\r\n   */\r\n  async delete(\r\n    id: string | number | undefined | Array<string | number> | ApiParams\r\n  ) {\r\n    let url = `${this.controllerURL}`;\r\n    let params: ApiParams | undefined = undefined;\r\n    if (id instanceof Array) {\r\n      url = `${this.controllerURL}/${id.join(\",\")}`;\r\n    } else if (typeof id == \"object\") {\r\n      params = id;\r\n    } else if (arguments.length) {\r\n      url = `${this.controllerURL}/${[...arguments].join(\",\")}`;\r\n    }\r\n\r\n    const config: BeforeSendConfig = {\r\n      method: \"DELETE\",\r\n      url,\r\n      params,\r\n      headers: this.headers,\r\n    };\r\n    this.beforeSends.forEach((handler) => {\r\n      handler(config);\r\n    });\r\n    const result = await request.delete(\r\n      config.url,\r\n      config.params,\r\n      config.headers\r\n    );\r\n    this.afterReceives.forEach((handler) => {\r\n      handler(result);\r\n    });\r\n    return result;\r\n  }\r\n}\r\nconst handler = {\r\n  get(\r\n    target: {\r\n      $action: string | undefined;\r\n      $controller: Controller;\r\n    },\r\n    property: string,\r\n    receiver: any\r\n  ) {\r\n    const controller = target.$controller;\r\n    if (property in controller) {\r\n      return controller[property];\r\n    }\r\n    let match = controller.parseActionsRegExp.exec(property);\r\n\r\n    let $action: string | undefined = undefined;\r\n    if (match && match.groups) {\r\n      let [first, ...rest] = match.groups.name;\r\n      let name = [first.toLowerCase(), ...rest].join(\"\");\r\n      property = name;\r\n      $action = match.groups.action;\r\n    }\r\n\r\n    return createController(\r\n      property,\r\n      controller.controllerURL + \"/\",\r\n      controller.headers,\r\n      controller.beforeSends,\r\n      controller.afterReceives,\r\n      controller.actionsMap,\r\n      controller.parseActions,\r\n      $action\r\n    );\r\n  },\r\n  apply(\r\n    target: {\r\n      $action: string | undefined;\r\n      $controller: Controller;\r\n    },\r\n    thisArg: any,\r\n    argumentsList: any[]\r\n  ): any {\r\n    const controller = target.$controller;\r\n    const action = target.$action;\r\n    if (action) {\r\n      return controller[action].apply(controller, argumentsList);\r\n    }\r\n    if (argumentsList.length === 0) return new Proxy(target, handler);\r\n    const [param] = argumentsList;\r\n\r\n    return createController(\r\n      param,\r\n      controller.controllerURL + \"/\",\r\n      controller.headers,\r\n      controller.beforeSends,\r\n      controller.afterReceives,\r\n      controller.actionsMap,\r\n      controller.parseActions\r\n    );\r\n  },\r\n};\r\n/**\r\n * \r\n * @param {*} name \r\n * @param {*} baseUrl \r\n * @param {*} headers \r\n * @param  {...any} options \r\n * [\r\n\r\n * beforeSends\r\n * afterReceives\r\n *  * actionsMap:{\r\n * \r\n *    get:true,\r\n      post:\"add\",\r\n      put:\"update\",\r\n      patch:\"modify\",\r\n      delete:[\"del\",\"remove\",false] //false mean dont parse delSomething to something.del()\r\n * }\r\n    parseAction:[\"get\",\"add\",\"update\"...]\r\n * ]\r\n * @returns \r\n */\r\nexport function createController(\r\n  name: string,\r\n  baseUrl: string,\r\n  headers: ApiHeaders = {},\r\n  beforeSends: BeforeSendHandler[] = [],\r\n  afterReceives: Array<(result: any) => any> = [],\r\n  actionsMap?: Record<string, string | boolean | string[]>,\r\n  parseActions?: Array<string>,\r\n  $action?: string\r\n): ApiProxy {\r\n  const func = () => {};\r\n  func.$action = $action;\r\n  func.$controller = new Controller(\r\n    name,\r\n    baseUrl,\r\n    headers,\r\n    beforeSends,\r\n    afterReceives,\r\n    actionsMap,\r\n    parseActions\r\n  );\r\n  return new Proxy(func, handler) as unknown as ApiProxy;\r\n}\r\n\r\nexport default {\r\n  create: createController,\r\n};\r\n", "import request from \"./request\";\r\nimport { createController, Controller } from \"./controller\";\r\nexport default {\r\n  request,\r\n  createController,\r\n  Controller,\r\n};\r\n\r\nexport { request, createController, Controller };\r\n"],
  "mappings": "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",
  "names": ["handler"]
}
